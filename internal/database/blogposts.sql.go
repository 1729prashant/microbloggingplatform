// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: blogposts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createBlogPost = `-- name: CreateBlogPost :one
INSERT INTO blogposts (id, created_at, updated_at, body, user_id)
VALUES (
    gen_random_uuid(),
    clock_timestamp(),
    clock_timestamp(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, body, user_id
`

type CreateBlogPostParams struct {
	Body   string
	UserID uuid.UUID
}

func (q *Queries) CreateBlogPost(ctx context.Context, arg CreateBlogPostParams) (Blogpost, error) {
	row := q.db.QueryRowContext(ctx, createBlogPost, arg.Body, arg.UserID)
	var i Blogpost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const deleteBlogPost = `-- name: DeleteBlogPost :exec


DELETE FROM blogposts
WHERE id = $1 AND user_id = $2
`

type DeleteBlogPostParams struct {
	ID     uuid.UUID
	UserID uuid.UUID
}

func (q *Queries) DeleteBlogPost(ctx context.Context, arg DeleteBlogPostParams) error {
	_, err := q.db.ExecContext(ctx, deleteBlogPost, arg.ID, arg.UserID)
	return err
}

const getAllBlogPosts = `-- name: GetAllBlogPosts :many



SELECT id, created_at, updated_at, body, user_id FROM blogposts
ORDER BY created_at ASC
`

func (q *Queries) GetAllBlogPosts(ctx context.Context) ([]Blogpost, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blogpost
	for rows.Next() {
		var i Blogpost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllBlogPostsDesc = `-- name: GetAllBlogPostsDesc :many


SELECT id, created_at, updated_at, body, user_id FROM blogposts
ORDER BY created_at DESC
`

func (q *Queries) GetAllBlogPostsDesc(ctx context.Context) ([]Blogpost, error) {
	rows, err := q.db.QueryContext(ctx, getAllBlogPostsDesc)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blogpost
	for rows.Next() {
		var i Blogpost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogPost = `-- name: GetBlogPost :one

SELECT id, created_at, updated_at, body, user_id 
FROM blogposts 
WHERE id = $1 
LIMIT 1
`

func (q *Queries) GetBlogPost(ctx context.Context, id uuid.UUID) (Blogpost, error) {
	row := q.db.QueryRowContext(ctx, getBlogPost, id)
	var i Blogpost
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Body,
		&i.UserID,
	)
	return i, err
}

const getBlogPostsAsc = `-- name: GetBlogPostsAsc :many


SELECT id, created_at, updated_at, body, user_id
FROM blogposts
WHERE user_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetBlogPostsAsc(ctx context.Context, userID uuid.UUID) ([]Blogpost, error) {
	rows, err := q.db.QueryContext(ctx, getBlogPostsAsc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blogpost
	for rows.Next() {
		var i Blogpost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBlogPostsDesc = `-- name: GetBlogPostsDesc :many

SELECT id, created_at, updated_at, body, user_id
FROM blogposts
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetBlogPostsDesc(ctx context.Context, userID uuid.UUID) ([]Blogpost, error) {
	rows, err := q.db.QueryContext(ctx, getBlogPostsDesc, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Blogpost
	for rows.Next() {
		var i Blogpost
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Body,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
