// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, hashed_password)
VALUES (
    gen_random_uuid(),
    clock_timestamp(),
    clock_timestamp(),
    $1,
    $2
)
RETURNING id, created_at, updated_at, email, hashed_password, is_chirpy_red
`

type CreateUserParams struct {
	Email          string
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.HashedPassword)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.HashedPassword,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec

DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getEncryptedPassword = `-- name: GetEncryptedPassword :one

SELECT hashed_password, id, created_at, updated_at, email, is_chirpy_red FROM users 
WHERE email = $1
LIMIT 1
`

type GetEncryptedPasswordRow struct {
	HashedPassword string
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	Email          string
	IsChirpyRed    sql.NullBool
}

func (q *Queries) GetEncryptedPassword(ctx context.Context, email string) (GetEncryptedPasswordRow, error) {
	row := q.db.QueryRowContext(ctx, getEncryptedPassword, email)
	var i GetEncryptedPasswordRow
	err := row.Scan(
		&i.HashedPassword,
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.IsChirpyRed,
	)
	return i, err
}

const getUser = `-- name: GetUser :one


SELECT id, created_at, updated_at, email FROM users 
WHERE id = $1
`

type GetUserRow struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	Email     string
}

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i GetUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec


UPDATE users
SET email = $2, hashed_password = $3, updated_at = clock_timestamp()
WHERE id = $1
`

type UpdateUserParams struct {
	ID             uuid.UUID
	Email          string
	HashedPassword string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.ID, arg.Email, arg.HashedPassword)
	return err
}

const upgradeToChirpyRed = `-- name: UpgradeToChirpyRed :exec


UPDATE users
SET is_chirpy_red = TRUE, updated_at = clock_timestamp()
WHERE id = $1
`

func (q *Queries) UpgradeToChirpyRed(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, upgradeToChirpyRed, id)
	return err
}
